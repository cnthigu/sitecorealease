<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - OrigensCO</title>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<body style="background-image: url('/images/wallpaperflare.com_wallpaper.jpg'); background-size: cover; background-position: center; background-repeat: no-repeat;">
    <header class="header">
        <div class="header-container">
            <a class="logo" asp-area="" asp-controller="Home" asp-action="Index">
                <img src="/images/origenscovertical.png" alt="OrigensCO Logo" class="logo-image">
            </a>

            <button class="navbar-toggler" type="button" onclick="toggleMenu()">
                <span class="navbar-toggler-icon"></span>
            </button>
            <nav>
                <ul class="nav-links" id="navLinks">
                    <li><a class="nav-link" asp-controller="Home" asp-action="Index">Home</a></li>
                    <li><a class="nav-link" asp-controller="Registro" asp-action="Register">Register</a></li>
                    @{
                        var user = Context.Session.GetString("User");
                    }
                    <li>
                        @if (string.IsNullOrEmpty(user))
                        {
                            <a class="nav-link" asp-controller="Login" asp-action="Login">Store</a>
                        }
                        else
                        {
                            <a class="nav-link" asp-controller="Pagamento" asp-action="Index">Store</a>
                        }
                    </li>
                    <li><a class="nav-link" asp-controller="Market" asp-action="Index">Market Live</a></li>
                    <li><a class="nav-link" asp-controller="Mining" asp-action="Index">Mining Live</a></li>
                    <li><a class="nav-link" asp-controller="Download" asp-action="Index">Download</a></li>
                    <li><a class="nav-link" asp-controller="Wiki" asp-action="Index">Wiki</a></li>
                </ul>
            </nav>
            <div class="auth-buttons">
                @if (!string.IsNullOrEmpty(user))
                {
                    <a class="login-button logged-in" asp-controller="Login" asp-action="Logout">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </a>
                }
                else
                {
                    <a class="login-button" asp-controller="Login" asp-action="Login">Login</a>
                }
            </div>
            @await Component.InvokeAsync("OnlinePlayers")
        </div>
    </header>

    <!-- Barra lateral flutuante para redes sociais -->
    <div class="social-sidebar">
        <a href="https://discord.gg/dbj3eGKHHH" target="_blank" class="social-link discord" title="Discord">
            <i class="fab fa-discord"></i>
        </a>
        <a href="https://www.facebook.com/OrigensConquer" target="_blank" class="social-link facebook" title="Facebook">
            <i class="fab fa-facebook-f"></i>
        </a>
        <a href="https://chat.whatsapp.com/GJPB1Kvspkd3YpKxfQoujR" target="_blank" class="social-link whatsapp" title="WhatsApp">
            <i class="fab fa-whatsapp"></i>
        </a>
    </div>

    <main role="main">
        @RenderBody()
    </main>

    <!-- Modal de Anúncio de Estreia -->
    <div id="launch-announcement" class="announcement-modal">
        <div class="announcement-content">
            <button class="announcement-close" onclick="closeAnnouncement()">×</button>
            <div class="announcement-header">
                <i class="fas fa-calendar-day announcement-icon"></i>
                <h2 class="announcement-title">Lançamento OrigensCO</h2>
            </div>
            <div class="announcement-body">
                <div class="announcement-date">
                    <span class="date-number">14</span>
                    <span class="date-month">MARÇO</span>
                </div>
                <p class="announcement-message">O servidor <strong>OrigensCO</strong> estará oficialmente no ar!</p>
                <div class="announcement-countdown">
                    <div class="countdown-item">
                        <span id="countdown-days" class="countdown-value">00</span>
                        <span class="countdown-label">Dias</span>
                    </div>
                    <div class="countdown-item">
                        <span id="countdown-hours" class="countdown-value">00</span>
                        <span class="countdown-label">Horas</span>
                    </div>
                    <div class="countdown-item">
                        <span id="countdown-minutes" class="countdown-value">00</span>
                        <span class="countdown-label">Minutos</span>
                    </div>
                    <div class="countdown-item">
                        <span id="countdown-seconds" class="countdown-value">00</span>
                        <span class="countdown-label">Segundos</span>
                    </div>
                </div>
            </div>
            <div class="announcement-footer">
                <button class="announcement-button" onclick="closeAnnouncement()">Entendi!</button>
                <label class="announcement-checkbox">
                    <input type="checkbox" id="dontShowAgain"> Não mostrar novamente
                </label>
            </div>
        </div>
    </div>


    @await RenderSectionAsync("Scripts", required: false)

    <script>
        // Data de lançamento - formato: ano, mês (0-11), dia, hora, minuto, segundo
        const launchDate = new Date(2025, 2, 14, 0, 0, 0); // 14 de Março de 2025 (mês é 0-indexed)
        let countdownInterval;

        // Função para atualizar o contador de jogadores online
        function updateOnlinePlayers() {
            fetch('/api/onlineplayers')
                .then(response => response.json())
                .then(data => {
                    const countElement = document.querySelector('.online-players-count');
                    if (countElement) {
                        // Animação de contagem
                        const currentCount = parseInt(countElement.textContent);
                        const newCount = data.count;

                        if (currentCount !== newCount) {
                            countElement.classList.add('updating');
                            setTimeout(() => {
                                countElement.textContent = newCount;
                                countElement.classList.remove('updating');
                            }, 300);
                        }
                    }
                })
                .catch(error => console.error('Erro ao atualizar jogadores online:', error));
        }

        // Função para atualizar o contador regressivo
        function updateCountdown() {
            console.log("Atualizando contador...");
            const now = new Date();
            const distance = launchDate - now;

            // Cálculo de tempo
            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);

            // Atualizar elementos HTML
            document.getElementById('countdown-days').textContent = days.toString().padStart(2, '0');
            document.getElementById('countdown-hours').textContent = hours.toString().padStart(2, '0');
            document.getElementById('countdown-minutes').textContent = minutes.toString().padStart(2, '0');
            document.getElementById('countdown-seconds').textContent = seconds.toString().padStart(2, '0');

            // Se a data já passou
            if (distance < 0) {
                clearInterval(countdownInterval);
                document.getElementById('countdown-days').textContent = '00';
                document.getElementById('countdown-hours').textContent = '00';
                document.getElementById('countdown-minutes').textContent = '00';
                document.getElementById('countdown-seconds').textContent = '00';
            }
        }

        // Verificar se o anúncio já foi fechado
        function checkAnnouncementStatus() {
            console.log("Verificando status do anúncio...");
            // Limpar o localStorage para teste
            localStorage.removeItem('dontShowAnnouncement');

            const dontShowAgain = localStorage.getItem('dontShowAnnouncement');
            console.log("dontShowAnnouncement:", dontShowAgain);

            if (dontShowAgain !== 'true') {
                console.log("Exibindo anúncio...");
                const announcementElement = document.getElementById('launch-announcement');
                if (announcementElement) {
                    announcementElement.style.display = 'flex';
                    updateCountdown();
                    // Iniciar o contador
                    countdownInterval = setInterval(updateCountdown, 1000);
                } else {
                    console.error("Elemento 'launch-announcement' não encontrado!");
                }
            } else {
                console.log("Anúncio não será exibido porque o usuário optou por não vê-lo novamente.");
            }
        }

        // Fechar o anúncio
        function closeAnnouncement() {
            console.log("Fechando anúncio...");
            document.getElementById('launch-announcement').style.display = 'none';

            // Verificar se a opção "não mostrar novamente" está marcada
            if (document.getElementById('dontShowAgain').checked) {
                console.log("Salvando preferência de não mostrar novamente...");
                localStorage.setItem('dontShowAnnouncement', 'true');
            }

            // Parar o contador
            clearInterval(countdownInterval);
        }

        // Forçar exibição do anúncio (para teste)
        function forceShowAnnouncement() {
            console.log("Forçando exibição do anúncio...");
            localStorage.removeItem('dontShowAnnouncement');
            document.getElementById('launch-announcement').style.display = 'flex';
            updateCountdown();
            countdownInterval = setInterval(updateCountdown, 1000);
        }

        // Inicializar quando o documento estiver pronto - COMBINADO
        document.addEventListener('DOMContentLoaded', function() {
            console.log("DOM carregado. Iniciando funções...");

            // Inicializar contador de jogadores
            updateOnlinePlayers();

            // Verificar status do anúncio após um pequeno delay
            setTimeout(checkAnnouncementStatus, 1000);

            // Atualizar jogadores online a cada 60 segundos
            setInterval(updateOnlinePlayers, 60000);
        });

        // Expor as funções para o escopo global
        window.closeAnnouncement = closeAnnouncement;
        window.forceShowAnnouncement = forceShowAnnouncement;
    </script>
</body>
</html>